# CloudFormation template for the Kubernetes playground instance.  Parameters are supplied by Terraform.
# Author: Andrew Jarombek
# Date: 3/10/2019

AWSTemplateFormatVersion: '2010-09-09'
Description: 'Playground EC2 instance for testing Kubernetes'

Parameters:
  VpcId:
    Type: "AWS::EC2::VPC::Id"
    Description: "VPC to deploy the Docker Playground in"
  SubnetId:
    Type: "AWS::EC2::Subnet::Id"
    Description: "Subnet to deploy the Docker Playground in"
  MyCidr:
    Type: "String"
    Description: "CIDR for my local environment"
  PublicCidr:
    Type: "String"
    Description: "CIDR for all IP addresses"
  AMI:
    Type: "String"
    Description: "AMI for the EC2 instance"
  UserData:
    Type: "String"
    Description: "UserData for bootstrapping the EC2 instance"

Metadata:

  AWS::CloudFormation::Interface:
    ParameterGroups:
    -
      Label:
        default: "Terraform AWS Data"
      Parameters:
      - VpcId
      - SubnetId
      - MyCidr
      - PublicCidr
      - AMI
      - UserData
    ParameterLabels:
      VpcId:
        default: "VPC to deploy the EC2 instance in"
      SubnetId:
        default: "Subnet to deploy the EC2 instance in"
      MyCidr:
        default: "CIDR for my local environment"
      PublicCidr:
        default: "CIDR for all IP addresses"
      AMI:
        default: "AMI for the EC2 instance"
      UserData:
        default: "UserData for bootstrapping the EC2 instance"

Resources:

 # Create an EC2 instance for Kubernetes testing running Amazon Linux 2
  K8sPlaygroundInstance:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          default:
            - "preReq"
            - "install"
        # Prerequisite commands which will allow us to install Docker & Kubernetes tools with Apt
        preReq:
          commands:
            00AptUpdate:
              command: apt-get update && apt-get install -y apt-transport-https
            01AptKey:
              command: curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -
            02AptK8s:
              command: |
                cat <<EOF >/etc/apt/sources.list.d/kubernetes.list
                deb http://apt.kubernetes.io/ kubernetes-xenial main
                EOF
            03AptUpdate:
              command: apt-get update
        install:
          commands:
            # Using Apt, install Docker, kubeadm, kubectl, kubelet, and CNI (Container Network Interface)
            00Install:
              command: apt-get --assume-yes install docker.io kubeadm kubectl kubelet kubernetes-cni
            # Run the same command to verify the installations
            01Verify:
              command: apt-get --assume-yes install docker.io kubeadm kubectl kubelet kubernetes-cni
    Properties:
      # us-east-1 Ubuntu
      ImageId: !Ref AMI
      InstanceType: "t2.micro"
      KeyName: "sandbox-kubernetes-playground-key"
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: 0
          SubnetId: !Ref SubnetId
          GroupSet:
            - !Ref K8sPlaygroundSecurityGroup
      UserData:
       Fn::Base64: !Ref UserData
      Tags:
        -
          Key: Name
          Value: kubernetes-playground-instance

  # Security group for the Kubernetes playground
  K8sPlaygroundSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "sandbox-kubernetes-security-group"
      GroupDescription: "Security Group for the Kubernetes Playground Instance"
      VpcId: !Ref VpcId
      Tags:
        -
          Key: Name
          Value: sandbox-kubernetes-security-group

  # Kubernetes Playground security group rule allowing my computer to connect to the instance via SSH
  K8sPlaygroundSecurityGroupIngressSSH:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref K8sPlaygroundSecurityGroup
      IpProtocol: tcp
      ToPort: 22
      FromPort: 22
      CidrIp: !Ref MyCidr

  # Kubernetes Playground security group rule allowing inbound traffic for ping
  K8sPlaygroundSecurityGroupIngressICMP:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref K8sPlaygroundSecurityGroup
      IpProtocol: icmp
      ToPort: -1
      FromPort: -1
      CidrIp: !Ref PublicCidr

  # Kubernetes Playground security group rule allowing outbound internet access over HTTP
  K8sPlaygroundSecurityGroupEgressHTTP:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref K8sPlaygroundSecurityGroup
      IpProtocol: tcp
      ToPort: 80
      FromPort: 80
      CidrIp: !Ref PublicCidr

  # Kubernetes Playground security group rule allowing outbound internet access over HTTPS
  K8sPlaygroundSecurityGroupEgressHTTPS:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref K8sPlaygroundSecurityGroup
      IpProtocol: tcp
      ToPort: 443
      FromPort: 443
      CidrIp: !Ref PublicCidr